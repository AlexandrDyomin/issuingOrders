doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        mete(http-equiv="X-UA-Compatible" content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Document
        //- templates
        include ./src/parts/plate.pug
        include ./src/parts/input.pug
        include ./src/parts/radio-button.pug
        include ./src/parts/workers.pug
        include ./src/parts/checkbox-button.pug
        include ./src/parts/textarea.pug
        include ./src/parts/add-btn.pug
        include ./src/parts/del-btn.pug
        include ./src/parts/button.pug
        include ./src/parts/dropdown.pug
        //- Reset and base styles
        style. 
            * {
                padding: 0px;
                margin: 0px;
                border: none;
            }

            *,
            *::before,
            *::after {
                box-sizing: border-box;
            }

            /* Links */

            a, a:link, a:visited  {
                text-decoration: none;
            }

            a:hover  {
                text-decoration: none;
            }

            /* Common */

            aside, nav, footer, header, section, main {
                display: block;
            }

            h1, h2, h3, h4, h5, h6, p {
                font-size: inherit;
                font-weight: inherit;
            }

            ul, ul li {
                list-style: none;
            }

            img {
                vertical-align: top;
            }

            img, svg {
                max-width: 100%;
                height: auto;
            }

            address {
            font-style: normal;
            }

            /* Form */

            input, textarea, button, select {
                font-family: inherit;
                font-size: inherit;
                color: inherit;
                background-color: transparent;
            }

            input::-ms-clear {
                display: none;
            }

            button, input[type="submit"] {
                display: inline-block;
                box-shadow: none;
                background-color: transparent;
                background: none;
                cursor: pointer;
            }

            input:focus, input:active,
            button:focus, button:active {
                outline: none;
            }

            button::-moz-focus-inner {
                padding: 0;
                border: 0;
            }

            label {
                cursor: pointer;
            }

            legend {
                display: block;
            }

            html {
                font-family: Roboto Serif;
                font-size: 10px;
                font-weight: normal;
            }

            body {
                padding: 1rem 1rem 2rem 1rem;
                background: #45464c;
            }

            main {
                min-width: 33rem;
                max-width: 110rem;
                margin: 0 auto;
            }

            input,
            button,
            textarea {
                transition: box-shadow .3s linear;
            }

            input[type="number"] {
                appearance: textfield;
            }

            input[type="number"]::-webkit-outer-spin-button,
            input[type="number"]::-webkit-inner-spin-button {
                -webkit-appearance: none;
            }

            input[type="number"]::-ms-reveal {
                display: none; 
            }

            input:focus,
            input:hover,
            textarea:focus,
            textarea:hover {
                outline: none;
                box-shadow: 0px 4px 2px -2px rgba(80, 0, 251, 0.4);
            }

            button:disabled {
                opacity: 0.4;
            }

            h1 {
                text-align: center;
                font-size: 2.5rem;
                background: linear-gradient(to left, #45464c, black , #45464c);
                color: white;
                padding: 1.5rem;
                text-transform: uppercase;
                letter-spacing: 3px;
            }

            .field {
                width: 100%;
                height: 2.5rem;
                padding: 0 1rem;
                display: block;
                border-style: solid;
                border-color: #675C5C;
                border-top-width: 0;
                border-left-width:0;
                border-right-width:0;
                border-bottom-width: 1px;
                border-radius: 0.5rem;
                box-shadow: 0px 4px 2px -2px rgba(0, 0, 0, 0.25);
                font-size: 1.6rem;
                cursor:text;
            }

            .title {
                min-width: max-content;
                font-size: 1.8rem;
                font-weight: bold;
            }

        body
            template#place
                +dropdown
                    - for (let [key, value] of Object.entries(activities))
                        - for (let [k, v] of Object.entries(value))
                            li(data-line=key)=v.name
                

            template#action
                .activities__action 
                    +input(style="text-align: start")
                    +del-btn(data-action="delete row")

            main 
                style. 
                    form {
                        display: grid;
                        grid-template-columns: repeat(3, minmax(33rem, 1fr));
                        gap: 2rem;
                    }
                form(name="data")
                    h1(style="grid-column: 1/4") Выдача наряда-допуска 
                    +plate
                        label.order-number 
                            h3.title № наряда
                            +input(type='number' min='1' name="number")
                        style. 
                            .order-number {
                                display: flex;
                                align-items: end;
                                gap: 2rem;
                            }
                    
                    +plate(style="grid-column: 2/4") 
                        .date-time
                            h3.title Работу начать
                            +input(type='date' aria-label="Дата начала работы" name="startDate")
                            +input(type="time" aria-label="Время начала работы" name="startTime")  
                            h3.title Работу закончить
                            +input(type='date'  aria-label="Дата окончания работы" name="endDate")
                            +input(type="time" aria-label="Время окончания работы" name="endTime")
                        style. 
                            .date-time {
                                display: grid;
                                grid-template-columns: 1fr 2fr 2fr;
                                align-items: end;
                                gap: 2rem;
                            }
                        script(defer type="module"). 
                            let date = new Date();
                            let year = date.getFullYear();
                            let month = (date.getMonth() + 1).toString().padStart(2, '0');
                            let day = date.getDate().toString().padStart(2, '0');
                            
                            let formatDate = `${year}-${month}-${day}`;
                            console.log(formatDate)
                            document.querySelectorAll('.custom-input[type=date]')
                                .forEach((el) => el.value = formatDate);
                    
                    +workers("Ответственный руководитель работ")(class="leaders")
                        each worker in masters
                            li 
                                +radio-button(`${worker.name} ${worker.group}`)(name='leader' value=`${worker.name} ${worker.group}`)
                    script(defer type="module"). 
                        let leaders = document.querySelector('.leaders');
                        leaders.addEventListener('change', handleChange);

                        function handleChange(e) {
                            let value = e.target.value;
                            let allowing = document.querySelector(`.allowing .radio-button__btn[value="${value}"]`);
                            if (!allowing.checked) {
                                if (document.querySelectorAll(`input[value="${allowing.value}"]:checked:not(.watching input)`).length < 2) {
                                    allowing.checked = true;
                                    allowing.dispatchEvent(new Event('change', { bubbles: true }));
                                }
                            }

                        }
                        
                    +workers("Допускающий")(class="allowing")
                        each worker in [...masters, ...workersWithFouthGroup]
                            li 
                                +radio-button(`${worker.name} ${worker.group}`)(name='allowing' value=`${worker.name} ${worker.group}`)

                    +workers("Производитель работ")(class="foreman")
                        each worker in [...masters, ...workersWithFouthGroup]
                            li 
                                +radio-button(`${worker.name} ${worker.group}`)(name='foreman' value=`${worker.name} ${worker.group}`)

                    +workers("Наблюдающий")(style="grid-column: 1/4;" class="watching")
                        each worker in [...masters, ...electricians]
                            li
                                +radio-button(`${worker.name} ${worker.group}`)(name='watching' value=`${worker.name} ${worker.group}`)
                        li 
                            +radio-button("не назначается")(name='watching' value="не назначается" checked)
                    
                    script(defer type="module"). 
                        document.forms.data.addEventListener('change', handleFormChange);

                        let disabledInputs = [];
                        let statistics = {};

                        function handleFormChange(e) {
                            let conditions = {
                                watching: () => {
                                    let inputs = Array.from(document.querySelectorAll(`input[value="${e.target.value}"]`))
                                        .filter((worker) => worker.name !== 'watching');
                                    
                                    for (let input of disabledInputs) {
                                        input.disabled = false;
                                    }

                                    for (let input of inputs) {
                                        input.disabled = true;
                                        input.checked = false;
                                        disabledInputs.push(input);
                                    }

                                },
                                leader: control,
                                allowing: control,
                                foreman: control,
                                giving: control,
                                workers: () => {
                                    let checkedInputs = Array.from(document.querySelectorAll(`.workers input:checked`))
                                        .filter((input) => input.name !== 'watching');
                                    disable(checkedInputs, '.watching input');
                                    disable(document.querySelectorAll(`.electricians input:checked`), '.foreman input');

                                }
                            }
                            conditions[e.target.name]?.();

                            function disable(checkedInputs, selector) {
                                let target = document.querySelectorAll(selector);
                                for (let input of target) {
                                    if (!checkedInputs.length) {
                                        input.disabled = false;
                                    }

                                    for (let checkedInput of checkedInputs) {
                                        if (input.value === checkedInput.value) {
                                            input.disabled = true;
                                            break;
                                        } else {
                                            input.disabled = false;
                                        }
                                    }
                                }
                            }
                            
                            function control() {
                                let checkedInputs = Array.from(document.querySelectorAll(`.workers input:checked`))
                                    .filter((input) => input.name !== 'watching');
                                disable(checkedInputs, '.watching input');
                                disable(document.querySelectorAll(`.foreman input:checked`), '.electricians input');

                               
                                statistics[e.target.value] ? statistics[e.target.value] += 1 : statistics[e.target.value] = 1;
                                let checkedValues = checkedInputs.reduce((acc, item) => {
                                    if (acc.includes(item.value)) {
                                        return acc;
                                    }
                                    acc.push(item.value);
                                    return acc;
                                }, []);

                                for (let key in statistics) {
                                    if (!checkedValues.includes(key)) {
                                        delete statistics[key];
                                    }

                                    statistics[key] = document.querySelectorAll(`input[value="${key}"]:checked`).length;

                                    let notChecked = document.querySelectorAll(`input[value="${key}"]:not(:checked):not(.watching input):not(.electricians input)`);
                                    notChecked?.forEach((input) => {
                                        if (statistics[input.value] > 1) {
                                            input.disabled = true;
                                        } else {
                                            input.disabled = false;
                                        }
                                    });
                                }
                            }
                        }



                    +workers("Члены бригады")(style="grid-column: 1/4;" class="electricians")
                        each worker in electricians
                            li
                                +checkbox-button(`${worker.name} ${worker.group}`)(name='workers' value=`${worker.name} ${worker.group}`)
                    +plate(style="grid-column: 1/3") 
                        .workplace 
                            h3.title Наименование рабочего места и характер работы
                            h4.workplace__subtitle Воздушные линии
                            ul.workplace__overhead-lines
                                each line in lines
                                    li 
                                        +radio-button(line.name)(name="overheadLine" value=line.name)
                                li(style="grid-column: 1/4") 
                                    +input(name="overheadLine" placeholder="Укажите № ВЛ если её нет в списке выше" style="text-align: start;")
                            label.workplace__supports
                                h4.workplace__subtitle(style="margin: 0 0 0 2rem;") Номера опор
                                +input(name="supports" style="text-align: start;")
                            label.workplace__mission
                                h4.workplace__subtitle(style="margin: 6px 0 0 2rem;") Поручается выполнить 
                                +textarea(name="mission")
                        
                        style. 
                            .workplace__subtitle {
                                font-size: 1.4rem;
                                font-weight: bold;
                                margin: 2rem 0 2rem 2rem;
                                min-width: max-content;
                            }

                            .workplace__overhead-lines {
                                display: grid;
                                grid-template-columns: repeat(3, 1fr);
                                gap: 2rem 4rem;
                                margin-left: 4rem;
                            }

                            .workplace__supports,
                            .workplace__mission {
                                display: flex;
                                align-items: end;
                                gap: 2rem;
                                margin: 2rem 0;
                            }

                            .workplace__mission {
                                align-items: start;
                            }
                        script. 
                            async function getActivities(url, line) {
                                try {
                                    let res = await fetch(`${url}?line=${encodeURI(line)}`);
                                    let data = await res.json();
                                    return data;
                                } catch (e) {
                                    console.log(e);
                                }
                            }
                        script(defer type="module"). 
                            let lineInput = document.querySelector('.custom-input[name=overheadLine]');
                            lineInput.addEventListener('focusout', handlelineInputFocusout);
                            let overheadLines = document.querySelector('.workplace__overhead-lines');
                            overheadLines.addEventListener('change', handleOverheadLinesChange);
                            let supports = document.querySelector('.workplace__supports .custom-input');
                            supports.addEventListener('change', handleSupportsChange);
                            let mission = document.querySelector('.workplace__mission .textarea');
     
                            

                            function handleSupportsChange(e) {
                                let firstSupport = e.target.value.match(/[A-ZА-Я]?\d+\s?-\s?[A-ZА-Я]?\d*|\d+(\s?\/\s?\d+)+|[A-ZА-Я]?\d+/)[0];
                                mission.value = mission.value.replace(/ оп. № [A-ZА-Я]?\d+\s?-\s?[A-ZА-Я]?\d*| оп. № \d+(\s?\/\s?\d+)+| оп. № [A-ZА-Я]?\d+|^$|$/i, ` оп. № ${firstSupport}`);
                            }

                            async function handleOverheadLinesChange(e) {
                                if (e.target.type === 'radio' && lineInput.value) {
                                    lineInput.value = '';
                                }

                                if (e.target.type === 'radio') {
                                    mission.value = mission.value.replace(/на ВЛ \d+кВ № \d+\s*-\s*\d+|^$|^/i, `на ${e.target.value}`);
                                }

                                if (e.target.type === 'text' && /\d+кВ № \d+\s*-\s*\d+/.test(e.target.value)) {
                                    mission.value = mission.value.replace(/на ВЛ \d+кВ № \d+\s*-\s*\d+|^$|^/i, `на ${e.target.value}`);
                                }
                                
                                let activities = await getActivities('http://localhost:8000/activities', e.target.value);
                                let electricalInstalation = document.querySelector('.activities .custom-input[name^="electricalInstalation"]');
                                let dropdownList = electricalInstalation.closest('.dropdown').querySelector('.dropdown__list');
                                dropdownList.innerHTML = '';
                                for(let value of Object.values(activities)) {
                                    dropdownList.innerHTML += `<li data-line="${e.target.value}">${value.name}</li>`;
                                }
                                dropdownList.firstChild.click();
                            }

                            function handlelineInputFocusout(e) {
                                if (e.target.value) {
                                    let checkboxCheked = e.target.closest('.workplace__overhead-lines')
                                        .querySelector('.radio-button__btn:checked');
                                    checkboxCheked && (checkboxCheked.checked = false);
                                }
                            }
                    +workers("Выдающий наряд")
                        each worker in bosses
                            li 
                                +radio-button(`${worker.name} ${worker.group}`)(name='giving' value=`${worker.name} ${worker.group}` checked=worker.name === 'Пшенковский В.А.' && true)

                   

                    +plate(style="grid-column: 1/4;")
                        .activities 
                            h3.title.activities__title Мероприятия по подготовке рабочих мест к выполнению работы
                            .activities__subtitles
                                h4.activities__subtitle Наименование электроустановок, в которых нужно провести отключения и установить заземления
                                h4.activities__subtitle Что должно быть отключено и где заземлено
                            .activities__fields
                                +dropdown(data-group="1")
                                    - for (let [key, value] of Object.entries(activities))
                                        - for (let [k, v] of Object.entries(value))
                                            li(data-line=key)=v.name
                                .activities__action(data-group="1") 
                                    +input(name="action1" style="text-align: start;")
                                    +del-btn(data-action="delete row" disabled)
                            .activities__btns
                                +add-btn(
                                    style="justify-self: center;"
                                    data-action="add place"
                                )
                                +add-btn(
                                    style="justify-self: center;"
                                    data-action="add action"
                                )
                        style. 
                            .activities__title,
                            .activities__subtitles {
                                margin-bottom: 2rem;
                            }
                            .activities__subtitles,
                            .activities__btns {
                                display: grid;
                                grid-template-columns: 1fr 1fr;
                                gap: 4rem;
                                margin-left: 2rem;
                            }

                            .activities__fields {
                                display: grid;
                                grid-template-columns: 1fr 1fr;
                                gap: 2rem 4rem;
                                align-items: baseline;
                                margin-bottom: 1.5rem;
                                margin-left: 2rem;
                            }

                            .activities__subtitle {
                                font-weight: bold;
                                font-size: 1.6rem;
                                text-align: center;
                            }

                            .activities__action {
                                display: flex;
                                align-items: end;
                                gap: 0.5rem;
                            }

                            .activities__fields .dropdown li {
                                border-radius: 0.5rem;
                                padding: 0.3rem 0.5rem;
                                font-size: 1.6rem;
                                margin-bottom: 1rem;
                                cursor: pointer;
                                transition: background .3s linear;
                            }

                            .activities__fields .dropdown li:hover {
                                outline: 2px solid rgba(80, 0, 251, 0.4);
                            }



                        script(defer type="module"). 
                            let activities = document.querySelector('.activities');
                            activities.addEventListener('pointerdown', handleClick);
                            activities.addEventListener('custom-select', fillActions);

                            activities.addEventListener('custom-select', selectOverheadLine);
                            function selectOverheadLine(e) {
                                if (e.target.name === 'electricalInstalation1') {
                                    let line = e.detail.line;
                                    let overheadLineRadio = document.querySelector(`.workplace__overhead-lines .radio-button__btn[value="${line}"]`);
                                    overheadLineRadio.checked = true;
                                }
                            }
                            
                            async function fillActions(e) {
                                let activities = await getActivities('http://localhost:8000/activities', e.detail.line);
                                let actions;
                                for (let v of Object.values(activities)) {
                                    if (v.name === e.detail.target.value) {
                                        actions = v.actions;
                                    }
                                }
                                

                                let group = e.detail.target.closest('.dropdown').dataset.group;
                                let actionInput = document.querySelector(`.activities__action[data-group="${group}"] .custom-input`);
                                let addPlace = document.querySelector('.add-btn[data-action="add place"]');
                                let addAction = document.querySelector('.add-btn[data-action="add action"]');
                                
                                let activitiesActions = document.querySelectorAll(`.activities__action[data-group="${group}"]`);
                                let lastActivitiesAction = activitiesActions[activitiesActions.length - 1];
                                let dropdownFragment = document.getElementById('place');
                                
                                for (let i = 0; i < actions.length; i++) {
                                    if (activitiesActions[i]) {
                                        activitiesActions[i].children[0].value = actions[i];
                                    } else {
                                        let number = +lastActivitiesAction.children[0].name.at(-1) + 1;
                                        let dropdown = dropdownFragment.content.cloneNode(true).children[0];
                                        dropdown.style.visibility = 'hidden';
                                        dropdown.dataset.group = group;
                                        dropdown.children[0].name = `electricalInstalation${number}`;
                                        let activitiesAction = lastActivitiesAction.cloneNode(true);
                                        activitiesAction.dataset.group = group;
                                        activitiesAction.children[0].value = actions[i];
                                        activitiesAction.children[1].removeAttribute('disabled');
                                        activitiesAction.children[0].name = `action${number}`;
                                        lastActivitiesAction.after(dropdown);
                                        dropdown.after(activitiesAction);
                                        lastActivitiesAction = activitiesAction;
                                    }
                                }

                                activitiesActions = document.querySelectorAll(`.activities__action[data-group="${group}"]`);
                                for (let i = 0; i < activitiesActions.length; i++) {
                                    if (!actions[i]) {
                                        activitiesActions[i].children[1].click();
                                    }
                                }
                            }

                            function handleClick(e) {
                                let actions = {
                                    "add place": addRow,
                                    "add action": addRow.bind(null, "action"),
                                    "delete row": deleteRow
                                }

                                let fields = e.currentTarget.querySelector('.activities__fields');
                                let action = e.target.dataset.action || e.target.closest('button')?.dataset.action;
                                actions[action]?.();

                                function addRow(flag = "electricalInstalation") {
                                    let electricalInstalationFragment = document.getElementById('place').content.cloneNode(true);
                                    let actionFragment = document.getElementById('action').content.cloneNode(true);
                                    let dropdown = electricalInstalationFragment.querySelector('.dropdown')
                                    let input = dropdown.firstElementChild;
                                    input.addEventListener('pointerdown', openDropdown);
                                    dropdown.addEventListener('pointerdown', selectValue);
                                    input.addEventListener('blur', closeDropdown);
                                    input.addEventListener('input', closeDropdown);
                                    dropdown.addEventListener('pointerdown', highlightItem);


                                    let electricalInstalationInput = electricalInstalationFragment.querySelector('.custom-input');
                                    let actionInput = actionFragment.querySelector('.custom-input');
                                    let activitiesAction = actionFragment.querySelector('.activities__action');
                                    electricalInstalationInput.name = `electricalInstalation${fields.children.length / 2 + 1}`;
                                    actionInput.name = `action${fields.children.length / 2 + 1}`;
                                    let group = +fields.querySelector('.activities__action:last-child').dataset.group;
                                    
                                    let conditions = {
                                        action: () => {
                                            electricalInstalationFragment.children[0].style.visibility = "hidden";
                                            activitiesAction.dataset.group = group;
                                            electricalInstalationInput.closest('.dropdown').dataset.group = group;
                                        },
                                        electricalInstalation: () => {
                                            e.currentTarget.querySelector('.del-btn').removeAttribute('disabled');
                                            electricalInstalationInput.closest('.dropdown').dataset.group = group + 1;
                                            activitiesAction.dataset.group = group + 1;
                                        }
                                    }
                                    conditions[flag]();
                                    
                                    fields.append(
                                        electricalInstalationFragment,
                                        actionFragment
                                    )      
                                }

                                function deleteRow() {
                                    let isLastLineOfGroup = !e.target.closest('.activities__action').previousElementSibling.style.visibility;
                                    if (isLastLineOfGroup) {
                                        let group = e.target.closest('.activities__action').dataset.group;
                                        let fields = e.currentTarget.querySelectorAll(`*[data-group="${group}"]`);
                                        fields.forEach((el) => el.remove());
                                    } else {
                                        let action = e.target.closest('.activities__action');
                                        action.previousElementSibling.remove();
                                        action.remove();
                                    }


                                    let electricalInstalations = fields.querySelectorAll('.dropdown  .custom-input');
                                    let group = 1;
                                    electricalInstalations.forEach((el, i) => {
                                        el.name = `electricalInstalation${i+1}`;
                                        if (el.parentElement.style.visibility === 'hidden') {
                                            el.parentElement.dataset.group = group - 1;
                                        } else {
                                            el.parentElement.dataset.group = i === 0 ? group++ : group++;
                                        }
                                    });
                                    
                                    let actions = fields.querySelectorAll('.activities__action  .custom-input');
                                    group = 1;
                                    actions.forEach((el, i) => {
                                        el.name = `action${i+1}`;

                                        
                                        if (el.parentElement.previousElementSibling.style.visibility === 'hidden') {
                                            el.parentElement.dataset.group = group - 1;
                                        } else {
                                            el.parentElement.dataset.group = i === 0 ? group++ : group++;
                                        }
                                    });

                                    let groups = [...fields.querySelectorAll('*[data-group]')]
                                        .reduce((acc, el) => {
                                            if (!acc.includes(el.dataset.group)) {
                                                acc.push(el.dataset.group);
                                                return acc;
                                            }
                                            return acc;
                                        }, []);

                                    if (groups.length === 1) {
                                        fields.querySelector('.del-btn').setAttribute('disabled', true);
                                    }
                                }

                            }
                    
                    +button("Очистить форму")(type ="reset" style="grid-column: 1/2")
                    +button("Выдать наряд-допуск")(style="grid-column: 3/4")


        script(defer type="module").
            let btn = document.querySelector('.custom-button[type=button]');
            btn.onclick = async function sendData() {
                let formData = new FormData(document.forms.data);
                let data = {};
               
                for (let [key, value] of formData.entries()) {
                    data[key] = value;
                }

                data.workers = [];
                for (let worker of formData.getAll('workers')) {
                    data.workers.push(worker);
                }

                data.overheadLine = formData.get('overheadLine');
                data.supports = `оп. № ${data.supports}`;
                
                let date = new Date();
                data.timeIssue = date.toLocaleTimeString().slice(0, 5);
                data.dateIssue = date.toLocaleDateString();
                data = JSON.stringify(data);
                let url = 'http://localhost:8000/order';
                let res = await fetch(url, {
                    method: 'POST',
                    body: data
                })

                res = await res.blob();
                url = URL.createObjectURL(res);
                window.open(url, 'order');
            }
