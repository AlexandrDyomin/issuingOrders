doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        mete(http-equiv="X-UA-Compatible" content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Document
        //- templates
        include ./src/parts/plate.pug
        include ./src/parts/input.pug
        include ./src/parts/radio-button.pug
        include ./src/parts/workers.pug
        include ./src/parts/checkbox-button.pug
        include ./src/parts/textarea.pug
        include ./src/parts/add-btn.pug
        include ./src/parts/del-btn.pug
        //- Reset and base styles
        style. 
            * {
                padding: 0px;
                margin: 0px;
                border: none;
            }

            *,
            *::before,
            *::after {
                box-sizing: border-box;
            }

            /* Links */

            a, a:link, a:visited  {
                text-decoration: none;
            }

            a:hover  {
                text-decoration: none;
            }

            /* Common */

            aside, nav, footer, header, section, main {
                display: block;
            }

            h1, h2, h3, h4, h5, h6, p {
                font-size: inherit;
                font-weight: inherit;
            }

            ul, ul li {
                list-style: none;
            }

            img {
                vertical-align: top;
            }

            img, svg {
                max-width: 100%;
                height: auto;
            }

            address {
            font-style: normal;
            }

            /* Form */

            input, textarea, button, select {
                font-family: inherit;
                font-size: inherit;
                color: inherit;
                background-color: transparent;
            }

            input::-ms-clear {
                display: none;
            }

            button, input[type="submit"] {
                display: inline-block;
                box-shadow: none;
                background-color: transparent;
                background: none;
                cursor: pointer;
            }

            input:focus, input:active,
            button:focus, button:active {
                outline: none;
            }

            button::-moz-focus-inner {
                padding: 0;
                border: 0;
            }

            label {
                cursor: pointer;
            }

            legend {
                display: block;
            }

            html {
                font-family: Roboto Serif;
                font-size: 10px;
                font-weight: 400;
            }

            body {
                padding: 1rem;
                background: #45464c;
            }

            main {
                min-width: 33rem;
                max-width: 100rem;
                margin: 0 auto;
            }

            input[type="number"] {
                appearance: textfield;
            }

            input[type="number"]::-webkit-outer-spin-button,
            input[type="number"]::-webkit-inner-spin-button {
                -webkit-appearance: none;
            }

            input[type="number"]::-ms-reveal {
                display: none; 
            }

            input:focus,
            textarea:focus,
            button:focus {
                outline: none;
                box-shadow: 0px 4px 2px -2px rgba(80, 0, 251, 0.4);
            }

            .field {
                width: 100%;
                height: 2.5rem;
                padding: 0 1rem;
                display: block;
                border-style: solid;
                border-color: #675C5C;
                border-top-width: 0;
                border-left-width:0;
                border-right-width:0;
                border-bottom-width: 1px;
                border-radius: 0.5rem;
                box-shadow: 0px 4px 2px -2px rgba(0, 0, 0, 0.25);
                font-size: 1.4rem;
                cursor:text;
            }

            .title {
                min-width: max-content;
                font-size: 1.5rem;
                font-weight: 500;
            }

        body
            template#place
                +input(name="place" style="margin-left: 1rem;")

            template#action
                .activities__action 
                    +input(name='action')
                    +del-btn

            main 
                style. 
                    form {
                        display: grid;
                        grid-template-columns: repeat(3, minmax(33rem, 1fr));
                        gap: 2rem;
                    }
                form
                    +plate
                        label.order-number 
                            h3.title № наряда
                            +input(type='number' min='1')
                        style. 
                            .order-number {
                                display: flex;
                                align-items: end;
                                gap: 2rem;
                            }
                    
                    +plate(style="grid-column: 2/4") 
                        .date-time
                            h3.title Работу начать
                            +input(type='date' aria-label="Дата начала работы")
                            +input(type="time" aria-label="Время начала работы")  
                            h3.title Работу закончить
                            +input(type='date'  aria-label="Дата окончания работы")
                            +input(type="time" aria-label="Время окончания работы")
                        style. 
                            .date-time {
                                display: grid;
                                grid-template-columns: 1fr 2fr 2fr;
                                align-items: end;
                                gap: 2rem;
                            }
                    
                    +workers("Ответственный руководитель работ")
                        each worker in workers
                            +radio-button(worker)(name='leader' value=worker)

                    +workers("Допускающий")
                        each worker in workers
                            +radio-button(worker)(name='allowing' value=worker)

                    +workers("Производитель работ")
                        each worker in workers
                            +radio-button(worker)(name='foreman' value=worker)

                    +workers("Наблюдающий")
                        each worker in workers
                            +radio-button(worker)(name='watching' value=worker)
                        +radio-button("Не назначается")(name='watching' value="Не назначается" checked)
                    
                    +workers("Члены бригады")(style="grid-column: 2/4;")
                        each worker in workers
                            +checkbox-button(worker)(name='workers' value=worker)

                    +plate(style="grid-column: 1/4;") 
                        label.mission
                            h3.title.mission__title(style="margin-bottom: 2rem;") Поручается выполнить: 
                        .mission__textarea(style="margin: 0 2rem;")
                            +textarea

                    +plate(style="grid-column: 1/4;")
                        .activities 
                            h3.title.activities__title Мероприятия по подготовке рабочих мест к выполнению работы
                            .activities__subtitles
                                h4.activities__subtitle Наименование электроустановок, в которых нужно провести отключения и установить заземления
                                h4.activities__subtitle Что должно быть отключено и где заземлено
                            .activities__fields
                                +input(name="place" style="margin-left: 1rem; text-align: start;")
                                +input(name="action" style="width: calc(100% - 15px); text-align: start;")
                            .activities__btns
                                +add-btn(
                                    style="justify-self: center;"
                                    data-action="add place"
                                )
                                +add-btn(
                                    style="justify-self: center;"
                                    data-action="add action"
                                )
                        style. 
                            .activities__title,
                            .activities__subtitles {
                                margin-bottom: 2rem;
                            }
                            .activities__subtitles,
                            .activities__btns {
                                display: grid;
                                grid-template-columns: 1fr 1fr;
                                gap: 4rem;
                            }

                            .activities__fields {
                                display: grid;
                                grid-template-columns: 1fr 1fr;
                                gap: 2rem 4rem;
                                margin-bottom: 1.5rem;
                            }

                            .activities__subtitle {
                                font-weight: 500;
                                font-size: 1.4rem;
                                text-align: center;
                            }

                            .activities__action {
                                display: flex;
                                align-items: end;
                                gap: 0.5rem;
                            }

                        script. 
                            (() => {
                                document.addEventListener("DOMContentLoaded", handleDOMContentLoaded);
                                
                                function handleDOMContentLoaded() {
                                    let activities = document.querySelector('.activities');
                                    activities.addEventListener('click', handleClick);

                                    function handleClick(e) {
                                        let target = e.target;

                                        let actions = {
                                            "add place": addRow,
                                            "add action": addRow.bind(null, "action")
                                        }

                                        let action = target.dataset.action || target.closest('button')?.dataset.action;
                                        actions[action]?.();

                                        function addRow(flag) {
                                            let fields = e.currentTarget.querySelector('.activities__fields');
                                            let electricalInstalation = document.getElementById('place').content.cloneNode(true);
                                            let action = document.getElementById('action').content.cloneNode(true);
                                            if (flag === "action") {
                                                electricalInstalation.children[0].style.visibility = "hidden";
                                            }
                                            fields.append(
                                                electricalInstalation,
                                                action
                                            )      
                                        }
                                    }
                                }
                            })()


        style.
            iframe {
                width: 80vw;
                height: 80vh;
                position: absolute;
                top: 0;
                bottom: 0;
                left: 0;
                right:0;
                margin:auto;
            }

        script.
            let formData = {
                number: '26',
                leader: 'Дёмин А.П. гр. V',
                allowing: 'Дёмин А.П. гр. V',
                foreman: 'Лунёв В.В. гр. V',
                watching: 'не назначается',
                startDate: '19.06.23',
                endDate: '19.06.23',
                startTime: '14:40',
                endTime: '20:00',
                giving: 'Пшенковский В.А. гр. V',
                workers: [
                    'Мункуев В.С. гр. V', 'Дымбрылов Э.Г. гр. V', 'Лутай Е.В. гр. V', 'Мункуев В.С. гр. V', 'Дымбрылов Э.Г. гр. V', 'Лутай Е.В. гр. V'
                ],
                overhedLine: 'ВЛ-6кВ Л 4-1',
                support: 'оп. № 99-101',
                dateIssue: '23.06.23',
                timeIssue: '11:01'
            }


            function processData(data) {
                let processedData = [];
                let emptyObj = {
                    number: '',
                    additionalOrder: '',
                    leader: '',
                    allowing: '',
                    foreman: '',
                    watching: '',
                    workers1: '',
                    workers2: '',
                    startDate: '',
                    endDate: '',
                    startTime: '',
                    endTime: '',
                    giving: '',
                    worker1: '',
                    worker2: '',
                    worker3: '',
                    overhedLine: '',
                    support: '',
                    dateIssue: '',
                    timeIssue: ''
                }
                let groups = prepareDataForTables(data.workers);
                let strings = prepareStringsWithWorkers(data.workers);
                
                for (let i = 0; i < groups.length; i++) {
                    let group = groups[i];
                    let str = strings[i] || {};
                    let firstObj = i === 0 ? data : emptyObj;
                    let obj = { 
                        ...firstObj, 
                        ...group, 
                        ...str,
                        number : data.number,
                        dateIssue: data.dateIssue,
                        timeIssue: data.timeIssue,
                        additionalOrder: i === 0 ? '' : 'Дополнительный бланк',
                        giving: formData.giving
                    };
                    processedData.push(obj);
                }
                delete processedData[0].workers;

                return processedData; 


                function prepareDataForTables(workers, start = 0) {
                    let numberOfWorkerGroups = calcNumberOfWorkerGroups();
                    let groups = [];
                
                    (function split(start) {
                        if (start === numberOfWorkerGroups - 1) {
                            groups.push(createObj(workers.slice(start*2)));
                            return;
                        }
                
                        let arr = workers.slice(start*2, start*2+2);
                        arr.push('См. дополнительный бланк');
                        groups.push(createObj(arr));
                        
                        split(++start);
                    })(start);
                
                    return groups;
                
                    function calcNumberOfWorkerGroups() {
                        const maxNumberWorkers = 3;
                        if (workers.length <= maxNumberWorkers) {
                            var numberOfWorkerGroups = 1;
                        }
                        numberOfWorkerGroups  = Math.ceil(numberOfWorkerGroups || (workers.length - maxNumberWorkers) / (maxNumberWorkers - 1) + 1);
                        return numberOfWorkerGroups;
                    }
                
                    function createObj(arr) {
                        let obj = {};
                        for (let i = 0, prop = 'worker'; i < 3; i++) {
                            let value = arr[i] ? deleteGroup(arr[i]) : '';
                            obj[prop + (i + 1)] = value;
                        }
                        return obj;
                    }
                
                    function deleteGroup(str) {
                        return str.replace(/\sгр.\s\D+/, '');
                    }
                }


                function prepareStringsWithWorkers(workers, start = 0) {
                    const WORKERS_LINE_1_LENGTH = 80;
                    const WORKERS_LINE_2_LENGTH = 105;
                    let strings = [];
                    
                    (function prepare(start) {
                        let separator = '';
                        for (var i = start, str1 = '', str2 = '', stop; i < workers.length; i++) {
                            if (str1.length + workers[i].length + separator.length <= WORKERS_LINE_1_LENGTH) {
                                separator = ', '
                                str1 += workers[i] + separator;
                                continue;
                            }
                            stop = i;
                            separator = '';
                            for (let i = stop; i < workers.length; i++) {
                                if (str2.length + workers[i].length + separator.length <= WORKERS_LINE_2_LENGTH) {
                                    separator = ', ';
                                    str2 += workers[i] + separator;
                                    continue;
                                }
                                str2 = 'См. дополнительный бланк';
                                break;
                            }
                            break;
                        }
                        
                        str1 = str1.replace(/\s$/, '');
                        if (str2 !== 'См. дополнительный бланк') {
                            str1 = str2 ? str1 : str1.replace(/,$/, '');
                
                            str2 = str2.replace(/(,\s)$/, '');
                            strings.push({workers1: str1, workers2: str2});
                            return;
                        }
                        
                        strings.push({workers1: str1, workers2: str2});
                        prepare(stop);
                    })(start)
                
                    return strings;
                }
            }


            let btn = document.querySelector('input[type=button]');
            btn.onclick = async function sendData() {
                const data = JSON.stringify(processData(formData));
                let url = 'http://localhost:8000/order';
                let res = await fetch(url, {
                    method: 'POST',
                    body: data
                })

                res = await res.blob();

                url = URL.createObjectURL(res);
                let ifr = document.querySelector('iframe');
                ifr.src = url;
            }